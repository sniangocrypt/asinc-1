import requests
import asyncio
from aiohttp import ClientSession
from collections import OrderedDict
import time
import random
import json
import aiofiles

dict = []
#symbol = f"BTC"


async def get_okx_info():
    async with ClientSession() as session:
        url = f'https://www.okx.com/api/v5/market/tickers?instType=SPOT'
        headers = {
            'Accept': 'application/json',
        }
        async with session.get(url=url, headers=headers) as response:
            data = await response.json()
        okx = []
        for ticker in data['data']:
            if ticker['instId'][-5:] == "-USDT":
                dict.append(ticker['instId'][:-5])
                okx.append(ticker)
#        print(dict)
        async with aiofiles.open('okxbook.json', 'w') as file:
            await file.write(json.dumps(okx, indent=4))



async def get_binance_info():
    await get_okx_info()
    async with ClientSession() as session:
        url = f'https://api.binance.com/api/v3/ticker/price'
        headers = {
            'Accept': 'application/json',
        }
        async with session.get(url=url, headers=headers) as response:
            data = await response.json()
            binance = []
            for ticker in data:
                if ticker['symbol'][-4:] == "USDT" and ticker['symbol'][:-4] in dict:
                    binance.append(ticker)
#                    print(ticker)
        async with aiofiles.open('binancebook.json', 'w') as file:
            await file.write(json.dumps(binance, indent=4))



async def get_bybit_info():
    await get_okx_info()
    async with ClientSession() as session:
        url = f'https://api.bybit.com/v5/market/tickers?category=spot'
        headers = {
            'Accept': 'application/json',
        }
        async with session.get(url=url, headers=headers) as response:
            data = await response.json()
            bybit = []
            for ticker in data['result']['list']:
                if ticker['symbol'][-4:] == "USDT" and ticker['symbol'][:-4] in dict:
                    bybit.append(ticker)
#                    print(bybit)
        async with aiofiles.open('bybitbook.json', 'w') as file:
            await file.write(json.dumps(bybit, indent=4))


async def checker():
    await get_okx_info()
    await get_bybit_info()
    await get_binance_info()
    async with aiofiles.open('binancebook.json', 'r') as file:
        data_binance = await file.read()
    async with aiofiles.open('bybitbook.json', 'r') as file:
        data_bybit = await file.read()
    async with aiofiles.open('okxbook.json', 'r') as file:
        data_okx = await file.read()
    binance_check = json.loads(data_binance)
    bybit_check = json.loads(data_bybit)
    okx_check = json.loads(data_okx.replace("-", ""))
    for binance, bybit, okx in zip(binance_check, bybit_check, okx_check):
        okx['last'] = okx['symbol']
        if binance['symbol'] in bybit['symbol'] and binance['symbol'] in okx['last']:
            print(float(binance['price']/bybit['lastPrice']))
#            if float(binance['price']/bybit['lastPrice']) or float(binance['price']/okx['last']) >= 1.0005:



#    print(binance_obj['symbol'])



async def main():
#    tasks = [checker()]
#    await asyncio.gather(*tasks)
    await checker()


print("Start Time:", time.strftime('%X'))
asyncio.run(main())
print("End Time:", time.strftime('%X'))
